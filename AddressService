using Sabio.Data.Providers;
using Sabio.Models.Domain;
using Sabio.Models.Requests.Addresses;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Text;
using Sabio.Data;
using System.Security.Cryptography;

namespace Sabio.Services
{
    public class AddressesService : IAddressesService

    {
        IDataProvider _data = null;
        public AddressesService(IDataProvider data)
        {
            _data = data;
        }

        public void Update(AddressUpdateRequest model)
        {
            string procName = "[dbo].[Sabio_Addresses_Update]";

            _data.ExecuteNonQuery(procName, inputParamMapper: delegate (SqlParameterCollection col)
            {
                col.AddWithValue("@LineOne", model.LineOne);
                col.AddWithValue("@SuiteNumber", model.SuiteNumber);
                col.AddWithValue("@City", model.City);
                col.AddWithValue("@State", model.State);
                col.AddWithValue("@PostalCode", model.PostalCode);
                col.AddWithValue("@IsActive", model.IsActive);
                col.AddWithValue("@Lat", model.Lat);
                col.AddWithValue("@Long", model.Long);

                col.AddWithValue("@Id", model.Id);

            }, returnParameters: null);



        }






        public int Add(AddressAddRequest model)
        {
            //         @Id int OUTPUT,
            //         @LineOne nvarchar(50),
            //@SuiteNumber int,
            //         @City nvarchar(50),
            //@State nvarchar(50),
            //@PostalCode nvarchar(50),
            //@IsActive bit,
            //         @Lat float,
            //         @Long float

            int id = 0;
            string procName = "dbo.Sabio_Addresses_Insert";

            _data.ExecuteNonQuery(procName, inputParamMapper: delegate (SqlParameterCollection col)
            {
                col.AddWithValue("@LineOne", model.LineOne);
                col.AddWithValue("@SuiteNumber", model.SuiteNumber);
                col.AddWithValue("@City", model.City);
                col.AddWithValue("@State", model.State);
                col.AddWithValue("@PostalCode", model.PostalCode);
                col.AddWithValue("@IsActive", model.IsActive);
                col.AddWithValue("@Lat", model.Lat);
                col.AddWithValue("@Long", model.Long);

                SqlParameter idOut = new SqlParameter("@Id", SqlDbType.Int);
                idOut.Direction = ParameterDirection.Output;

                col.Add(idOut);



            }, returnParameters: delegate (SqlParameterCollection returnCol)
            {
                object oId = returnCol["@Id"].Value;

                Int32.TryParse(oId.ToString(), out id);

                Console.WriteLine("");
            });

            return id;
        }

        public Address Get(int id)
        {
            Address address = null;


            string procName = "[dbo].[Sabio_Addresses_SelectById]";

            _data.ExecuteCmd(procName, delegate (SqlParameterCollection paramCollection)
            {
                //input mapper takes data from one shape and makes it another shape

                paramCollection.AddWithValue("@Id", id);


            }, delegate (IDataReader reader, short set)
            {
                address = MapAddress(reader);


            } /*delegate (SqlParameterCollection returnParams) //single record mapper*/
            );

            return address;
        }


        public List<Address> GetTop()
        {
            List<Address> list = null;
            string procName = "[dbo].[Sabio_Addresses_SelectRandom50]";


            _data.ExecuteCmd(procName, inputParamMapper: null

            , singleRecordMapper: delegate (IDataReader reader, short set)
            {
                Address aAddress = MapAddress(reader);

                if (list == null)
                {
                    list = new List<Address>();
                }


                list.Add(aAddress);

            });

            return list;
        }


        public void Delete(int id)
        {
            string procName = "dbo.Sabio_Addresses_DeleteById";
            _data.ExecuteNonQuery(procName, inputParamMapper: delegate (SqlParameterCollection col)
            {

                col.AddWithValue("@Id", id);


            });
        }


        private static Address MapAddress(IDataReader reader)
        {
            Address aAddress = new Address();
            int startingIndex = 0;

            aAddress.Id = reader.GetSafeInt32(startingIndex++);
            aAddress.LineOne = reader.GetSafeString(startingIndex++);
            aAddress.SuiteNumber = reader.GetSafeInt32(startingIndex++);
            aAddress.City = reader.GetSafeString(startingIndex++);
            aAddress.State = reader.GetSafeString(startingIndex++);
            aAddress.PostalCode = reader.GetSafeString(startingIndex++);
            aAddress.IsActive = reader.GetSafeBool(startingIndex++);
            aAddress.Lat = reader.GetSafeDouble(startingIndex++);
            aAddress.Long = reader.GetSafeDouble(startingIndex++);
            return aAddress;
        }
    }
}
